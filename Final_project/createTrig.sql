SET SCHEMA FN71840;

----AFTER TRIGGER ON MANAGERS

-- Copy table
CREATE TABLE MANAGER_COPY LIKE FN71840.MANAGER;

-- Insert into copied table
INSERT INTO MANAGER_COPY
SELECT * FROM FN71840.MANAGER;

-- Create table
CREATE TABLE AUDIT_MNG(C_TIME TIMESTAMP, TEXT VARCHAR(200));

--Create trigger
CREATE TRIGGER TRIG_UPD_MNG
    AFTER UPDATE OF SALARY ON MANAGER_COPY
    REFERENCING OLD AS O NEW AS N
    FOR EACH ROW
    WHEN (O.SALARY != N.SALARY)
    BEGIN
      DECLARE V_TEXT VARCHAR(200);
      SET V_TEXT = ' MANAGER ID = ' || O.ID
                        || ' OLD SALARY = ' || CHAR(O.SALARY)
                        || ' NEW SALARY = ' || CHAR(N.SALARY);
      INSERT INTO AUDIT_MNG VALUES(CURRENT_TIMESTAMP, V_TEXT);
    END;

SELECT NAME, SALARY, BONUS
FROM MANAGER_COPY
WHERE ID = 'MNG221';

UPDATE MANAGER_COPY
    SET SALARY = SALARY + 20 * 100 * SALARY
    WHERE ID = 'MNG221';



---- BEFORE TRIGGER ON RECEPTIONISTS

-- Copy table
CREATE TABLE RECEPTIONISTS_NEW LIKE FN71840.RECEPTIONISTS;

--Create trigger
CREATE TRIGGER TRIG_REC_NEW
    BEFORE INSERT ON RECEPTIONISTS_NEW
    REFERENCING NEW AS N
    FOR EACH ROW
    WHEN (N.BONUS IS NOT NULL)
     SET N.BONUS = N.BONUS + 100;

-- Insert into copied table
INSERT INTO RECEPTIONISTS_NEW
SELECT * FROM RECEPTIONISTS;



----AFTER TRIGGER ON ATTENDANTS

-- Copy table
CREATE TABLE ATTENDANTS_NEW LIKE ATTENDANTS;

-- Insert into copied table
INSERT INTO ATTENDANTS_NEW
SELECT * FROM ATTENDANTS;

-- Create table
CREATE TABLE AUDIT_ATT(CTIME TIMESTAMP, TEXT VARCHAR(200));

--Create trigger
CREATE TRIGGER TRIG_NEW_ATT
    AFTER UPDATE OF BONUS ON ATTENDANTS_NEW
    REFERENCING OLD AS O NEW AS N
    FOR EACH ROW
    WHEN (O.BONUS != N.BONUS)
    BEGIN
      DECLARE V_TEXT VARCHAR(200);
      SET V_TEXT =  ' ATT_NO = ' || O.ID
                        || ' OLD BONUS = ' || INT(O.BONUS)
                        || ' NEW BONUS = ' || INT(N.BONUS);
      INSERT INTO AUDIT_ATT VALUES(CURRENT_TIMESTAMP, V_TEXT);
    END;


SELECT NAME, SALARY, BONUS FROM ATTENDANTS_NEW
WHERE ID = 'ATT233';

UPDATE ATTENDANTS_NEW
    SET BONUS = BONUS + 300
    WHERE ID = 'ATT233';

UPDATE ATTENDANTS_NEW
    SET BONUS = BONUS + 200
    WHERE ID = 'ATT433';




---- BEFORE TRIGGER ON ROOMS

-- Copy table
CREATE TABLE ROOMS_NEW LIKE ROOMS;

-- Create trigger
CREATE TRIGGER TRIG_ROOM_NEW
    BEFORE INSERT ON ROOMS_NEW
    REFERENCING NEW AS N
    FOR EACH ROW
    WHEN (N.PRICE IS NOT NULL)
     SET N.PRICE = N.PRICE + 50;

-- Insert into copied table
INSERT INTO ROOMS_NEW
SELECT * FROM ROOMS;



----BEFORE TRIGGER ON GUESTS

-- Copy table
CREATE TABLE GUESTS_NEW LIKE GUESTS;

--Create trigger
CREATE TRIGGER TRIG_GUESTS_NEW
    BEFORE INSERT ON GUESTS_NEW
    REFERENCING NEW AS N
    FOR EACH ROW
    WHEN (N.AGE IS NOT NULL)
     SET N.AGE = N.AGE + 1;

-- Insert into copied table
INSERT INTO GUESTS_NEW
SELECT * FROM GUESTS;



----AFTER TRIGGER ON REGISTRATIONS

-- Copy table
CREATE TABLE REGISTRATIONS_NEW LIKE REGISTRATIONS;

-- Insert into copied table
INSERT INTO REGISTRATIONS_NEW
SELECT * FROM REGISTRATIONS;

-- Create table
CREATE TABLE AUDIT_REG(CTIME_REG TIMESTAMP, TEXT VARCHAR(200));

-- Create trigger
CREATE TRIGGER TRIG_NEW_REG
    AFTER UPDATE OF DAYS ON REGISRATIONS_NEW
    REFERENCING OLD AS OLD_REG NEW AS NEW_REG
    FOR EACH ROW
    WHEN (OLD_REG.DAYS != NEW_REG.DAYS)
    BEGIN
      DECLARE V_TEXT VARCHAR(200);
      SET V_TEXT =  ' REG_NO = ' || OLD_REG.ID
                        || ' OLD DAYS = ' || INT(OLD_REG.DAYS)
                        || ' NEW DAYS = ' || INT(NEW_REG.DAYS);
      INSERT INTO AUDIT_REG VALUES(CURRENT_TIMESTAMP, V_TEXT);
    END;

SELECT DAYS, A_DATE, L_DATE FROM REGISRATIONS_NEW
WHERE ID = 10;

UPDATE REGISRATIONS_NEW
    SET DAYS = DAYS + 5
    WHERE ID = 10;

UPDATE REGISRATIONS_NEW
    SET DAYS = DAYS + 3
    WHERE ID = 3;
